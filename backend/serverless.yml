service: blog

provider:
  name: aws
  runtime: nodejs8.10
  region: us-west-2
  versionFunctions: false
  # stage: dev
  environment:
    ARTICLES_TABLE: ${self:custom.articles.tableName}
    AGGREGATES_TABLE: ${self:custom.aggregates.tableName}
    AGGREGATES_TYPE_INDEX: ${self:custom.aggregates.typeIndex}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:ListStreams
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:custom.region}:*:table/${self:custom.articles.tableName}"

functions:
  auth:
    handler: src/authenticator.handler
    cors: true
    environment:
      AUTH0_CLIENT_ID: ${ssm:auth0ClientId}
      AUTH0_CLIENT_PUBLIC_KEY: ${ssm:auth0PublicKey}
  listArticles:
    handler: src/index.listArticles
    events:
      - http: GET articles
  createArticle:
    handler: src/index.createArticle
    events:
      - http:
          path: articles
          method: post
          authorizer: auth
          cors: true
  getArticle:
    handler: src/index.getArticle
    events:
      - http: GET articles/{id}
  articleArchives:
    handler: src/index.articleArchives
    events:
      - http: GET archives
      - http: GET archives/{year}
      - http: GET archives/{year}/{month}
  updateArticle:
    handler: src/index.updateArticle
    events:
      - http:
          path: articles/{id}
          method: post
          authorizer: auth
          cors: true
  deleteArticle:
    handler: src/index.deleteArticle
    events:
      - http:
          path: articles/{id}
          method: delete
          authorizer: auth
          cors: true
  articleCompute:
    handler: src/index.articleCompute
    events:
      - stream:
          type: dynamodb
          batchSize: 1
          startingPosition: LATEST
          arn:
            Fn::GetAtt: [ ArticlesTable, StreamArn ]

resources:
  Resources:
    # DynamoDB Table for Blog Articles
    ArticlesTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.articles.tableName}
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    # DynamoDB Table for Blog Articles
    AggregatesTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: aggregate
            AttributeType: S
          - AttributeName: type
            AttributeType: S
        KeySchema:
          - AttributeName: aggregate
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:custom.aggregates.typeIndex}
            KeySchema:
            - AttributeName: type
              KeyType: HASH
            Projection:
              NonKeyAttributes:
                - aggregate
                - count
                - ids
              ProjectionType: INCLUDE
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.aggregates.tableName}

    # This response is needed for custom authorizer failures cors support ¯\_(ツ)_/¯
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'

    # API Gateway custom authorizer unauthorized response
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  articles:
    tableName: ${self:custom.stage}-articles
  aggregates:
    tableName: ${self:custom.stage}-aggregates
    typeIndex: aggregatesByType

  # serverless-dynamodb-local - Offline DynamoDB
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      # dbPath: ${env:PWD}/.dynamodb/ # currently buggy on restart due to "ShardIterator"
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true

  # Ensure local env attaches to local ddb
  serverless-offline-dynamodb-streams:
    endpoint: http://localhost:8000
    region: ${self:custom.region}
    accessKeyId: root
    secretAccessKey: root
    skipCacheInvalidation: false

plugins:
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-offline-dynamodb-streams
  - serverless-offline
